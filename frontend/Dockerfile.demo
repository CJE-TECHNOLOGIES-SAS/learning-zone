# Simple frontend para demostraciÃ³n Docker - React + Vite
FROM node:18-alpine

# Establecer el directorio de trabajo
WORKDIR /app

# Crear una aplicaciÃ³n React simple para demostraciÃ³n
RUN npx create-vite@latest . --template react-ts --yes || true

# Instalar dependencias
RUN npm install

# Crear un archivo simple de demostraciÃ³n
RUN echo 'import { useState } from "react"
import "./App.css"

function App() {
  const [count, setCount] = useState(0)

  return (
    <>
      <div style={{ padding: "2rem", textAlign: "center" }}>
        <h1>ðŸš€ Learning Zone - Docker Demo</h1>
        <p>Frontend funcionando correctamente en Docker!</p>
        <button onClick={() => setCount((count) => count + 1)}>
          Contador: {count}
        </button>
        <div style={{ marginTop: "2rem" }}>
          <h3>ðŸ“Š Servicios Disponibles:</h3>
          <ul style={{ listStyle: "none", padding: 0 }}>
            <li>âœ… Frontend: Puerto 80</li>
            <li>âœ… Backend API: Puerto 8000</li>
            <li>âœ… Chat Service: Puerto 3001</li>
            <li>âœ… MySQL Database: Puerto 3306</li>
          </ul>
        </div>
        <div style={{ marginTop: "2rem" }}>
          <a href="http://localhost:8000/docs" target="_blank" rel="noopener noreferrer">
            ðŸ“‹ Ver DocumentaciÃ³n API
          </a>
        </div>
      </div>
    </>
  )
}

export default App' > src/App.tsx

# Construir la aplicaciÃ³n
RUN npm run build

# Etapa de producciÃ³n con Nginx
FROM nginx:alpine

# Copiar archivos construidos
COPY --from=0 /app/dist /usr/share/nginx/html

# Copiar configuraciÃ³n personalizada de Nginx
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Exponer puerto
EXPOSE 80

# Comando para iniciar Nginx
CMD ["nginx", "-g", "daemon off;"]
